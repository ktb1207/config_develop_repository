1.git 配置用户名和邮箱
	$ git config --global user.name "you name"
	$ git config --global user.email "you email@example.com"
2.查看git配置信息
	$ git config --list
3.创建版本库
	什么是版本库呢？版本库又名仓库，英文名repository，你可以简单理解成一个目录，这个目录里面的所有文件都可以被Git管理起来，每个文件的修改、删除，Git都能跟踪，以便任何时刻都可以追踪历史，或者在将来某个时刻可以“还原”。
	首先，选择一个合适的地方，创建一个空目录：
	$ mkdir learngit
	$ cd learngit
	$ pwd			--pwd命令用于显示当前目录
	第二步：通过git init命令把这个目录变成Git可以管理的仓库：
	$ git init
	瞬间Git就把仓库建好了，而且告诉你是一个空的仓库（empty Git repository），细心的读者可以发现当前目录下多了一个.git的目录，这个目录是Git来跟踪管理版本库的

4.把文件添加到版本库
	$ git add filename
	$ git commit -m"本次提交代码注释"
	为什么Git添加文件需要add，commit一共两步呢？因为commit可以一次提交很多文件，所以你可以多次add不同的文件，比如：
	$ git add file1.txt
	$ git add file2.txt file3.txt
	$ git commit -m "add 3 files."
5.查看仓库当前状态
	$ git status
6.查看文件修改信息
	$ git diff
7.查看最近提交日志
	$ git log
8.查看历史日志
	$ git reflog
9.git 回退版本
	首先，Git必须知道当前版本是哪个版本，在Git中，用HEAD表示当前版本，上一个版本就是HEAD^，上上一个版本就是HEAD^^，当然往上100个版本写100个^比较容易数不过来，所以写成HEAD~100。
	$ git reset --hard HEAD^  --回退上一个版本
	$ git reset --hard commit号 --回退指定版本，例如：
	$ git reset --hard cfba54a83bbd383834c12a326305b5ae81380c54
10.工作区/暂存区/版本库
	工作区--就是你在电脑里能看到的目录
	版本库--工作区有一个隐藏目录.git，这个不算工作区，而是git版本库
	暂存区--Git的版本库里存了很多东西，其中最重要的就是称为stage（或者叫index）的暂存区，还有Git为我们自动创建的第一个分支master，以及指向master的一个指针叫HEAD。
11.git 提交解释说明
	我们把文件往Git版本库里添加的时候，是分两步执行的：
	第一步是用git add把文件添加进去，实际上就是把文件修改添加到暂存区；
	第二步是用git commit提交更改，实际上就是把暂存区的所有内容提交到当前分支。
	因为我们创建Git版本库时，Git自动为我们创建了唯一一个master分支，所以，现在，git commit就是往master分支上提交更改。
	你可以简单理解为，需要提交的文件修改通通放到暂存区，然后，一次性提交暂存区的所有修改。
	一旦提交后，如果你又没有对工作区做任何修改，那么工作区就是“干净”的。
12.git 如何管理修改
	每次修改，如果不add到暂存区，那就不会加入到commit中。
	第一次修改 -> git add -> 第二次修改 -> git commit
	Git管理的是修改，当你用git add命令后，在工作区的第一次修改被放入暂存区，准备提交，但是，在工作区的第二次修改并没有放入暂存区，所以，git commit只负责把暂存区的修改提交了，也就是第一次的修改被提交了，第二次的修改不会被提交。
13.撤销修改
	一：工作区错误修改但没有git add到暂存区
		$ git checkout filename
		命令git checkout filename意思就是，把filename文件在工作区的修改全部撤销，这里有两种情况：
		一种是filename自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；
		一种是filename已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。
		总之，就是让这个文件回到最近一次git commit或git add时的状态。
	二：工作区错误修改已经git add到暂存区
		$ git reset HEAD filename	--可以把暂存区的修改撤销掉,重新放回工作区.
	三：各种撤销场景
		场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令git checkout -- file。
		场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令git reset HEAD file，就回到了场景1，第二步按场景1操作。
		场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，参考版本回退一节，不过前提是没有推送到远程库。
14.删除文件
	一般情况下，你通常直接在文件管理器中把没用的文件删了，或者用rm命令删了：$ rm test.txt，这个时候，Git知道你删除了文件，因此，工作区和版本库就不一致了，git status命令会立刻告诉你哪些文件被删除了。
	现在你有两个选择：
		一是确实要从版本库中删除该文件，那就用命令git rm删掉，并且git commit。
		二是删错了，因为版本库里还有呢，所以可以很轻松地把误删的文件恢复到最新版本：
		$ git checkout -- test.txt
		git checkout其实是用版本库里的版本替换工作区的版本，无论工作区是修改还是删除，都可以“一键还原”。

15.创建分支
	$ git checkout -b newbranchname		
	--git checkout命令加上-b参数表示创建并切换，相当于以下两条命令：
	$ git branch newbranchname
	$ git checkout newbranchname
16.查看当前分支
	$ git branch
	例如：	master
		* newban
	git branch命令会列出所有分支，当前分支前面会标一个*号。
17.切换分支
	$ git checkout branchname
18.合并分支
	$ git merge branchname
	--git merge命令用于合并指定分支到当前分支。
19.删除分支
	$ git branch -d branchname
20.查看当前的远程库
  $ git remote 不带参数，列出已经存在的远程分支
  $ git remote -v | --verbose 列出详细信息，在每一个名字后面列出其远程url
  $ git remote add 添加远程仓库
  $ git remote rm origin 删除远程分支
21.